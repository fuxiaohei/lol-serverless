<div class="container" id="traffic" data-x-acc="{{user.uuid}}" data-x-project="{{project.uuid}}">
    {{#if project}}
    <div>
        <h6 class="mb-0">Traffic Analysis</h6>
    </div>
    {{else}}
    <div>
        <h6 class="mb-0">Global Traffic</h6>
        <div class="d-flex justify-content-between align-items-center">
            <p class="text-body-tertiary mb-1">Aggregate traffic data for your account.</p>
            <div class="dropdown">
                <button class="btn btn-sm btn-secondary dropdown-toggle text-body-secondary custom-theme-btn"
                    id="traffic-period-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Last 24 Hours
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item traffic-period-select" data-x-period="1d" href="#">Last 24 Hours</a>
                    </li>
                    <li><a class="dropdown-item traffic-period-select" data-x-period="7d" href="#">Last 7 Days</a></li>
                </ul>
            </div>
        </div>
    </div>
    {{/if}}
    <div class="row g-4 py-4">
        <div class="col-6">
            <div class="border rounded p-4">
                <div>
                    <p class="text-body-tertiary text-uppercase mb-2">Request counts</p>
                    <p class="fw-bold mb-1" id="requests-total"></p>
                    <div id="requests-loading-spinner" class="spinner-grow spinner-grow-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <div id="requests-chart" style="height: 150px;"></div>
            </div>
        </div>
        <div class="col-6">
            <div class="border rounded p-4">
                <div>
                    <p class="text-body-tertiary text-uppercase mb-2">Transferred Bytes</p>
                    <p class="fw-bold mb-1" id="flows-total"></p>
                    <div id="flows-loading-spinner" class="spinner-grow spinner-grow-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <div id="flows-chart" style="height: 150px;"></div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.min.js"
    integrity="sha256-QvgynZibb2U53SsVu98NggJXYqwRL7tg3FeyfXvPOUY=" crossorigin="anonymous"></script>
<script type="text/javascript">

    const load_requests = (async () => {
        let d = document.getElementById("requests-loading-spinner");
        d.classList.remove("d-none");
        let c = document.getElementById('requests-chart');
        c.classList.add("opacity-0");

        let acc = document.getElementById("traffic").getAttribute("data-x-acc");
        let project = document.getElementById("traffic").getAttribute("data-x-project") || "";
        let params = new URLSearchParams();
        params.append("account", acc);
        params.append("period", window.traffic_period || "1d");
        if (project) {
            params.append("project", project);
        }
        let resp = await fetch("/traffic/requests", {
            method: "POST",
            body: params,
        })
        if (!resp.ok) {
            document.getElementById("requests-total").innerText = "Request timeout";
            d.classList.add("d-none");
            return
        }
        // hide loading spinner
        d.classList.add("d-none");
        c.classList.remove("opacity-0");

        let series = await resp.json();
        series = series["metric"] || { total: 0, values: [] };
        document.getElementById("requests-total").innerText = friendly_bytesize(series.total, false);
        let chart = echarts.init(c, null, { renderer: 'svg' });
        let option = {
            title: {
                show: false,
            },
            tooltip: {
                trigger: "axis",
                formatter: function (params) {
                    let t = params[0].axisValueLabel;
                    let v = params[0].value[1];
                    return `<span>${t}<br/><span style="color:#AC3B2A">REQUESTS</span> <strong>${v}</strong></span>`
                }
            },
            xAxis: {
                type: 'time',
                axisLabel: {
                    formatter: function (value, index) {
                        return unix2hour(value) // js use milliseconds
                    },
                    color: "#AAA",
                },
                splitNumber: 3,
            },
            yAxis: {
                show: false
            },
            grid: {
                top: 0,
                left: 0,
                right: 0,
                bottom: 20,
            },
            series: [
                {
                    type: 'line',
                    data: series.values || [],
                    smooth: true,
                    symbol: "none",
                    lineStyle: {
                        normal: {
                            color: "#AC3B2A",
                            width: 1,
                        }
                    },
                    areaStyle: {
                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0,
                                color: '#AC3B2A'
                            },
                            {
                                offset: 1,
                                color: 'rgba(201,30,4,0)'
                            }
                        ])
                    },
                }
            ]
        };
        chart.setOption(option);
    });
    load_requests();

    const load_flows = (async () => {
        let d = document.getElementById("flows-loading-spinner");
        d.classList.remove("d-none");
        let c = document.getElementById('flows-chart');
        c.classList.add("opacity-0");

        let acc = document.getElementById("traffic").getAttribute("data-x-acc");
        let project = document.getElementById("traffic").getAttribute("data-x-project") || "";
        let params = new URLSearchParams();
        params.append("account", acc);
        params.append("period", window.traffic_period || "1d");
        if (project) {
            params.append("project", project);
        }
        let resp = await fetch("/traffic/flows", {
            method: "POST",
            body: params,
        })
        if (!resp.ok) {
            document.getElementById("flows-total").innerText = "Request timeout";
            d.classList.add("d-none");
            return
        }
        // hide loading spinner
        d.classList.add("d-none");
        c.classList.remove("opacity-0");

        let series = await resp.json();
        let in_series = series["flowtype-in-uuid-" + acc] || { total: 0, values: [] };
        let out_series = series["flowtype-out-uuid-" + acc] || { total: 0, values: [] };
        if (project) {
            in_series = series["flowtype-in-p_uuid-" + project] || { total: 0, values: [] };
            out_series = series["flowtype-out-p_uuid-" + project] || { total: 0, values: [] };
        }
        document.getElementById("flows-total").innerText = friendly_bytesize(out_series.total + in_series.total, true);
        let chart = echarts.init(c, null, { renderer: 'svg' });
        let option = {
            title: {
                show: false,
            },
            tooltip: {
                trigger: "axis",
                formatter: function (params) {
                    let t = params[0].axisValueLabel;
                    let content = `<span>${t}<br/>`
                    params.forEach((p) => {
                        let v = friendly_bytesize(p.value[1], true);
                        let name = p.seriesName.toUpperCase();
                        content += `<span style="color:${p.color}">${name}</span> <strong>${v}</strong><br/>`
                    })
                    return content + "</span>"
                }
            },
            xAxis: {
                type: 'time',
                axisLabel: {
                    formatter: function (value, index) {
                        return unix2hour(value) // js use milliseconds
                    },
                    color: "#AAA",
                },
                splitNumber: 3,
            },
            yAxis: {
                show: false
            },
            grid: {
                top: 0,
                left: 0,
                right: 0,
                bottom: 20,
            },
            series: [
                {
                    type: 'line',
                    data: in_series.values,
                    name: "in",
                    smooth: true,
                    symbol: "none",
                    lineStyle: {
                        normal: {
                            color: "#5470c6",
                            width: 1,
                        }
                    },
                    areaStyle: {
                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0,
                                color: '#5470c6'
                            },
                            {
                                offset: 1,
                                color: 'rgba(8, 52, 189, 0)'
                            }
                        ])
                    },
                },
                {
                    type: 'line',
                    data: out_series.values,
                    name: "out",
                    smooth: true,
                    symbol: "none",
                    lineStyle: {
                        normal: {
                            color: "#91cc75",
                            width: 1,
                        }
                    },
                    areaStyle: {
                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                            {
                                offset: 0,
                                color: "#91cc75"
                            },
                            {
                                offset: 1,
                                color: 'rgba(58, 173, 3, 0)'
                            }
                        ])
                    },
                },
            ]
        };
        chart.setOption(option);
    });
    load_flows();

    /// convert unixtimestamp to hour and minute, HH:MM
    function unix2hour(v) {
        const dateObj = new Date(v)
        const hours = dateObj.getHours() >= 10 ? dateObj.getHours() : '0' + dateObj.getHours()
        const minutes = dateObj.getMinutes() < 10 ? dateObj.getMinutes() + '0' : dateObj.getMinutes()
        const UnixTimeToDate = hours + ':' + minutes
        if (window.traffic_period == "7d") {
            const month = dateObj.getMonth() + 1
            const days = dateObj.getDate() >= 10 ? dateObj.getDate() : '0' + dateObj.getDate()
            return month + '/' + days + ' ' + UnixTimeToDate
        }
        return UnixTimeToDate
    }

    (() => {
        document.querySelectorAll(".traffic-period-select").forEach((e) => {
            e.addEventListener("click", function (e) {
                e.preventDefault();
                // set traffic period to global
                let period = e.target.getAttribute("data-x-period");
                window.traffic_period = period;
                let text = e.target.innerText;
                document.getElementById("traffic-period-btn").innerText = text;
                load_requests();
                load_flows();
            });
        });
    })();

</script>