// Generated by `wit-bindgen` 0.4.0. DO NOT EDIT!

#[allow(clippy::all)]
pub mod http_types {
    #[derive(Clone)]
    pub enum RequestError {
        InvalidUrl(wit_bindgen::rt::string::String),
        TimeoutError(wit_bindgen::rt::string::String),
        ProtocolError(wit_bindgen::rt::string::String),
        UnexpectedError(wit_bindgen::rt::string::String),
    }
    impl core::fmt::Debug for RequestError {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                RequestError::InvalidUrl(e) => {
                    f.debug_tuple("RequestError::InvalidUrl").field(e).finish()
                }
                RequestError::TimeoutError(e) => f
                    .debug_tuple("RequestError::TimeoutError")
                    .field(e)
                    .finish(),
                RequestError::ProtocolError(e) => f
                    .debug_tuple("RequestError::ProtocolError")
                    .field(e)
                    .finish(),
                RequestError::UnexpectedError(e) => f
                    .debug_tuple("RequestError::UnexpectedError")
                    .field(e)
                    .finish(),
            }
        }
    }
    #[repr(u8)]
    #[derive(Clone, Copy, PartialEq, Eq)]
    pub enum RedirectPolicy {
        Follow,
        Error,
        Manual,
    }
    impl core::fmt::Debug for RedirectPolicy {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                RedirectPolicy::Follow => f.debug_tuple("RedirectPolicy::Follow").finish(),
                RedirectPolicy::Error => f.debug_tuple("RedirectPolicy::Error").finish(),
                RedirectPolicy::Manual => f.debug_tuple("RedirectPolicy::Manual").finish(),
            }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct RequestOptions {
        pub timeout_ms: Option<u32>,
        pub redirect_limit: Option<u32>,
        pub redirect: RedirectPolicy,
    }
    impl core::fmt::Debug for RequestOptions {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("RequestOptions")
                .field("timeout-ms", &self.timeout_ms)
                .field("redirect-limit", &self.redirect_limit)
                .field("redirect", &self.redirect)
                .finish()
        }
    }
    pub type HttpUriResult = wit_bindgen::rt::string::String;
    pub type HttpUriParam<'a> = &'a str;
    pub type HttpStatusCode = u16;
    pub type HttpMethodResult = wit_bindgen::rt::string::String;
    pub type HttpMethodParam<'a> = &'a str;
    pub type HttpHeadersResult = wit_bindgen::rt::vec::Vec<(
        wit_bindgen::rt::string::String,
        wit_bindgen::rt::string::String,
    )>;
    pub type HttpHeadersParam<'a> = &'a [(&'a str, &'a str)];
    pub type HttpBodyHandle = u32;
    #[derive(Clone)]
    pub struct Response {
        pub status: HttpStatusCode,
        pub headers: HttpHeadersResult,
        pub body: Option<HttpBodyHandle>,
    }
    impl core::fmt::Debug for Response {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("Response")
                .field("status", &self.status)
                .field("headers", &self.headers)
                .field("body", &self.body)
                .finish()
        }
    }
    #[derive(Clone)]
    pub struct RequestResult {
        pub method: HttpMethodResult,
        pub uri: HttpUriResult,
        pub headers: HttpHeadersResult,
        pub body: Option<HttpBodyHandle>,
    }
    impl core::fmt::Debug for RequestResult {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("RequestResult")
                .field("method", &self.method)
                .field("uri", &self.uri)
                .field("headers", &self.headers)
                .field("body", &self.body)
                .finish()
        }
    }
    #[derive(Clone)]
    pub struct RequestParam<'a> {
        pub method: HttpMethodParam<'a>,
        pub uri: HttpUriParam<'a>,
        pub headers: HttpHeadersParam<'a>,
        pub body: Option<HttpBodyHandle>,
    }
    impl<'a> core::fmt::Debug for RequestParam<'a> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("RequestParam")
                .field("method", &self.method)
                .field("uri", &self.uri)
                .field("headers", &self.headers)
                .field("body", &self.body)
                .finish()
        }
    }
    /// An error type returned from a body operation. Currently this
    /// doesn't provide any additional information.
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct BodyError {}
    impl core::fmt::Debug for BodyError {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("BodyError").finish()
        }
    }
    impl core::fmt::Display for BodyError {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}", self)
        }
    }
    impl std::error::Error for BodyError {}
    #[allow(clippy::all)]
    pub fn http_body_read(
        handle: HttpBodyHandle,
        size: u64,
    ) -> Result<(wit_bindgen::rt::vec::Vec<u8>, bool), BodyError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "http-types")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "http-body-read")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "http-types_http-body-read")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(handle),
                wit_bindgen::rt::as_i64(size),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    let len1 = *((ptr0 + 8) as *const i32) as usize;

                    (
                        Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1),
                        {
                            #[cfg(not(debug_assertions))]
                            {
                                core::mem::transmute::<u8, bool>(i32::from(
                                    *((ptr0 + 12) as *const u8),
                                )
                                    as u8)
                            }
                            #[cfg(debug_assertions)]
                            {
                                match i32::from(*((ptr0 + 12) as *const u8)) {
                                    0 => false,
                                    1 => true,
                                    _ => panic!("invalid bool discriminant"),
                                }
                            }
                        },
                    )
                }),
                1 => Err(BodyError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn http_body_write(handle: HttpBodyHandle, data: &[u8]) -> Result<u64, BodyError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = data;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "http-types")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "http-body-write")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "http-types_http-body-write")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(handle), ptr0, len0, ptr1);
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok(*((ptr1 + 8) as *const i64) as u64),
                1 => Err(BodyError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
}

#[allow(clippy::all)]
pub mod http_outgoing {
    pub type Request<'a> = super::http_types::RequestParam<'a>;
    pub type Response = super::http_types::Response;
    pub type RequestOptions = super::http_types::RequestOptions;
    pub type RequestError = super::http_types::RequestError;
    #[allow(clippy::all)]
    pub fn fetch(req: Request<'_>, options: RequestOptions) -> Result<Response, RequestError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 24]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let super::http_types::RequestParam {
                method: method0,
                uri: uri0,
                headers: headers0,
                body: body0,
            } = req;
            let vec1 = method0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let vec2 = uri0;
            let ptr2 = vec2.as_ptr() as i32;
            let len2 = vec2.len() as i32;
            let vec6 = headers0;
            let len6 = vec6.len() as i32;
            let layout6 = alloc::Layout::from_size_align_unchecked(vec6.len() * 16, 4);
            let result6 = if layout6.size() != 0 {
                let ptr = alloc::alloc(layout6);
                if ptr.is_null() {
                    alloc::handle_alloc_error(layout6);
                }
                ptr
            } else {
                core::ptr::null_mut()
            };
            for (i, e) in vec6.into_iter().enumerate() {
                let base = result6 as i32 + (i as i32) * 16;
                {
                    let (t3_0, t3_1) = e;
                    let vec4 = t3_0;
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    *((base + 4) as *mut i32) = len4;
                    *((base + 0) as *mut i32) = ptr4;
                    let vec5 = t3_1;
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    *((base + 12) as *mut i32) = len5;
                    *((base + 8) as *mut i32) = ptr5;
                }
            }
            let (result7_0, result7_1) = match body0 {
                Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                None => (0i32, 0i32),
            };
            let super::http_types::RequestOptions {
                timeout_ms: timeout_ms8,
                redirect_limit: redirect_limit8,
                redirect: redirect8,
            } = options;
            let (result9_0, result9_1) = match timeout_ms8 {
                Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                None => (0i32, 0i32),
            };
            let (result10_0, result10_1) = match redirect_limit8 {
                Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                None => (0i32, 0i32),
            };
            let ptr11 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "http-outgoing")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "fetch")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "http-outgoing_fetch")]
                fn wit_import(
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                );
            }
            wit_import(
                ptr1,
                len1,
                ptr2,
                len2,
                result6 as i32,
                len6,
                result7_0,
                result7_1,
                result9_0,
                result9_1,
                result10_0,
                result10_1,
                match redirect8 {
                    super::http_types::RedirectPolicy::Follow => 0,
                    super::http_types::RedirectPolicy::Error => 1,
                    super::http_types::RedirectPolicy::Manual => 2,
                },
                ptr11,
            );
            if layout6.size() != 0 {
                alloc::dealloc(result6, layout6);
            }
            match i32::from(*((ptr11 + 0) as *const u8)) {
                0 => Ok({
                    let base14 = *((ptr11 + 8) as *const i32);
                    let len14 = *((ptr11 + 12) as *const i32);
                    let mut result14 = Vec::with_capacity(len14 as usize);
                    for i in 0..len14 {
                        let base = base14 + i * 16;
                        result14.push({
                            let len12 = *((base + 4) as *const i32) as usize;
                            let len13 = *((base + 12) as *const i32) as usize;

                            (
                                {
                                    #[cfg(not(debug_assertions))]
                                    {
                                        String::from_utf8_unchecked(Vec::from_raw_parts(
                                            *((base + 0) as *const i32) as *mut _,
                                            len12,
                                            len12,
                                        ))
                                    }
                                    #[cfg(debug_assertions)]
                                    {
                                        String::from_utf8(Vec::from_raw_parts(
                                            *((base + 0) as *const i32) as *mut _,
                                            len12,
                                            len12,
                                        ))
                                        .unwrap()
                                    }
                                },
                                {
                                    #[cfg(not(debug_assertions))]
                                    {
                                        String::from_utf8_unchecked(Vec::from_raw_parts(
                                            *((base + 8) as *const i32) as *mut _,
                                            len13,
                                            len13,
                                        ))
                                    }
                                    #[cfg(debug_assertions)]
                                    {
                                        String::from_utf8(Vec::from_raw_parts(
                                            *((base + 8) as *const i32) as *mut _,
                                            len13,
                                            len13,
                                        ))
                                        .unwrap()
                                    }
                                },
                            )
                        });
                    }
                    wit_bindgen::rt::dealloc(base14, (len14 as usize) * 16, 4);

                    super::http_types::Response {
                        status: i32::from(*((ptr11 + 4) as *const u16)) as u16,
                        headers: result14,
                        body: match i32::from(*((ptr11 + 16) as *const u8)) {
                            0 => None,
                            1 => Some(*((ptr11 + 20) as *const i32) as u32),
                            #[cfg(not(debug_assertions))]
                            _ => core::hint::unreachable_unchecked(),
                            #[cfg(debug_assertions)]
                            _ => panic!("invalid enum discriminant"),
                        },
                    }
                }),
                1 => Err({
                    {
                        match i32::from(*((ptr11 + 4) as *const u8)) {
                            0 => super::http_types::RequestError::InvalidUrl({
                                let len15 = *((ptr11 + 12) as *const i32) as usize;

                                {
                                    #[cfg(not(debug_assertions))]
                                    {
                                        String::from_utf8_unchecked(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len15,
                                            len15,
                                        ))
                                    }
                                    #[cfg(debug_assertions)]
                                    {
                                        String::from_utf8(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len15,
                                            len15,
                                        ))
                                        .unwrap()
                                    }
                                }
                            }),
                            1 => super::http_types::RequestError::TimeoutError({
                                let len16 = *((ptr11 + 12) as *const i32) as usize;

                                {
                                    #[cfg(not(debug_assertions))]
                                    {
                                        String::from_utf8_unchecked(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len16,
                                            len16,
                                        ))
                                    }
                                    #[cfg(debug_assertions)]
                                    {
                                        String::from_utf8(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len16,
                                            len16,
                                        ))
                                        .unwrap()
                                    }
                                }
                            }),
                            2 => super::http_types::RequestError::ProtocolError({
                                let len17 = *((ptr11 + 12) as *const i32) as usize;

                                {
                                    #[cfg(not(debug_assertions))]
                                    {
                                        String::from_utf8_unchecked(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len17,
                                            len17,
                                        ))
                                    }
                                    #[cfg(debug_assertions)]
                                    {
                                        String::from_utf8(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len17,
                                            len17,
                                        ))
                                        .unwrap()
                                    }
                                }
                            }),
                            #[cfg(debug_assertions)]
                            3 => super::http_types::RequestError::UnexpectedError({
                                let len18 = *((ptr11 + 12) as *const i32) as usize;

                                {
                                    #[cfg(not(debug_assertions))]
                                    {
                                        String::from_utf8_unchecked(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len18,
                                            len18,
                                        ))
                                    }
                                    #[cfg(debug_assertions)]
                                    {
                                        String::from_utf8(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len18,
                                            len18,
                                        ))
                                        .unwrap()
                                    }
                                }
                            }),
                            #[cfg(not(debug_assertions))]
                            _ => super::http_types::RequestError::UnexpectedError({
                                let len18 = *((ptr11 + 12) as *const i32) as usize;

                                {
                                    #[cfg(not(debug_assertions))]
                                    {
                                        String::from_utf8_unchecked(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len18,
                                            len18,
                                        ))
                                    }
                                    #[cfg(debug_assertions)]
                                    {
                                        String::from_utf8(Vec::from_raw_parts(
                                            *((ptr11 + 8) as *const i32) as *mut _,
                                            len18,
                                            len18,
                                        ))
                                        .unwrap()
                                    }
                                }
                            }),
                            #[cfg(debug_assertions)]
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
}

#[allow(clippy::all)]
pub mod http_incoming {
    pub type Request = super::http_types::RequestResult;
    pub type Response = super::http_types::Response;
    pub trait HttpIncoming {
        fn handle_request(req: Request) -> Response;
    }

    #[doc(hidden)]
    pub unsafe fn call_handle_request<T: HttpIncoming>(
        arg0: i32,
        arg1: i32,
        arg2: i32,
        arg3: i32,
        arg4: i32,
        arg5: i32,
        arg6: i32,
        arg7: i32,
    ) -> i32 {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

        // Before executing any other code, use this function to run all static
        // constructors, if they have not yet been run. This is a hack required
        // to work around wasi-libc ctors calling import functions to initialize
        // the environment.
        //
        // This functionality will be removed once rust 1.69.0 is stable, at which
        // point wasi-libc will no longer have this behavior.
        //
        // See
        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
        // for more details.
        #[cfg(target_arch = "wasm32")]
        wit_bindgen::rt::run_ctors_once();

        let len0 = arg1 as usize;
        let len1 = arg3 as usize;
        let base4 = arg4;
        let len4 = arg5;
        let mut result4 = Vec::with_capacity(len4 as usize);
        for i in 0..len4 {
            let base = base4 + i * 16;
            result4.push({
                let len2 = *((base + 4) as *const i32) as usize;
                let len3 = *((base + 12) as *const i32) as usize;

                (
                    {
                        #[cfg(not(debug_assertions))]
                        {
                            String::from_utf8_unchecked(Vec::from_raw_parts(
                                *((base + 0) as *const i32) as *mut _,
                                len2,
                                len2,
                            ))
                        }
                        #[cfg(debug_assertions)]
                        {
                            String::from_utf8(Vec::from_raw_parts(
                                *((base + 0) as *const i32) as *mut _,
                                len2,
                                len2,
                            ))
                            .unwrap()
                        }
                    },
                    {
                        #[cfg(not(debug_assertions))]
                        {
                            String::from_utf8_unchecked(Vec::from_raw_parts(
                                *((base + 8) as *const i32) as *mut _,
                                len3,
                                len3,
                            ))
                        }
                        #[cfg(debug_assertions)]
                        {
                            String::from_utf8(Vec::from_raw_parts(
                                *((base + 8) as *const i32) as *mut _,
                                len3,
                                len3,
                            ))
                            .unwrap()
                        }
                    },
                )
            });
        }
        wit_bindgen::rt::dealloc(base4, (len4 as usize) * 16, 4);
        let result5 = T::handle_request(super::http_types::RequestResult {
            method: {
                #[cfg(not(debug_assertions))]
                {
                    String::from_utf8_unchecked(Vec::from_raw_parts(arg0 as *mut _, len0, len0))
                }
                #[cfg(debug_assertions)]
                {
                    String::from_utf8(Vec::from_raw_parts(arg0 as *mut _, len0, len0)).unwrap()
                }
            },
            uri: {
                #[cfg(not(debug_assertions))]
                {
                    String::from_utf8_unchecked(Vec::from_raw_parts(arg2 as *mut _, len1, len1))
                }
                #[cfg(debug_assertions)]
                {
                    String::from_utf8(Vec::from_raw_parts(arg2 as *mut _, len1, len1)).unwrap()
                }
            },
            headers: result4,
            body: match arg6 {
                0 => None,
                1 => Some(arg7 as u32),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            },
        });
        let ptr6 = _RET_AREA.0.as_mut_ptr() as i32;
        let super::http_types::Response {
            status: status7,
            headers: headers7,
            body: body7,
        } = result5;
        *((ptr6 + 0) as *mut u16) = (wit_bindgen::rt::as_i32(status7)) as u16;
        let vec11 = headers7;
        let len11 = vec11.len() as i32;
        let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 16, 4);
        let result11 = if layout11.size() != 0 {
            let ptr = alloc::alloc(layout11);
            if ptr.is_null() {
                alloc::handle_alloc_error(layout11);
            }
            ptr
        } else {
            core::ptr::null_mut()
        };
        for (i, e) in vec11.into_iter().enumerate() {
            let base = result11 as i32 + (i as i32) * 16;
            {
                let (t8_0, t8_1) = e;
                let vec9 = (t8_0.into_bytes()).into_boxed_slice();
                let ptr9 = vec9.as_ptr() as i32;
                let len9 = vec9.len() as i32;
                core::mem::forget(vec9);
                *((base + 4) as *mut i32) = len9;
                *((base + 0) as *mut i32) = ptr9;
                let vec10 = (t8_1.into_bytes()).into_boxed_slice();
                let ptr10 = vec10.as_ptr() as i32;
                let len10 = vec10.len() as i32;
                core::mem::forget(vec10);
                *((base + 12) as *mut i32) = len10;
                *((base + 8) as *mut i32) = ptr10;
            }
        }
        *((ptr6 + 8) as *mut i32) = len11;
        *((ptr6 + 4) as *mut i32) = result11 as i32;
        match body7 {
            Some(e) => {
                *((ptr6 + 12) as *mut u8) = (1i32) as u8;
                *((ptr6 + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
            }
            None => {
                *((ptr6 + 12) as *mut u8) = (0i32) as u8;
            }
        };
        ptr6
    }

    #[doc(hidden)]
    pub unsafe fn post_return_handle_request<T: HttpIncoming>(arg0: i32) {
        let base0 = *((arg0 + 4) as *const i32);
        let len0 = *((arg0 + 8) as *const i32);
        for i in 0..len0 {
            let base = base0 + i * 16;
            {
                wit_bindgen::rt::dealloc(
                    *((base + 0) as *const i32),
                    (*((base + 4) as *const i32)) as usize,
                    1,
                );
                wit_bindgen::rt::dealloc(
                    *((base + 8) as *const i32),
                    (*((base + 12) as *const i32)) as usize,
                    1,
                );
            }
        }
        wit_bindgen::rt::dealloc(base0, (len0 as usize) * 16, 4);
    }

    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, string::String, vec::Vec};

    #[repr(align(4))]
    struct _RetArea([u8; 20]);
    static mut _RET_AREA: _RetArea = _RetArea([0; 20]);
}

/// Declares the export of the component's world for the
/// given type.
#[macro_export]
macro_rules! export_http_interface(($t:ident) => {
      const _: () = {

        #[doc(hidden)]
        #[export_name = "http-incoming#handle-request"]
        #[allow(non_snake_case)]
        unsafe extern "C" fn __export_http_incoming_handle_request(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,) -> i32 {
          http_incoming::call_handle_request::<$t>(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,)
        }

        #[doc(hidden)]
        #[export_name = "cabi_post_http-incoming#handle-request"]
        #[allow(non_snake_case)]
        unsafe extern "C" fn __post_return_http_incoming_handle_request(arg0: i32,) {
          http_incoming::post_return_handle_request::<$t>(arg0,)
        }

      };

      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = __force_section_ref;
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      fn __force_section_ref() {
        __link_section()
      }
    });

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:http-interface"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2584] = [
    2, 0, 3, 119, 105, 116, 14, 104, 116, 116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101,
    14, 104, 116, 116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 0, 97, 115, 109, 12, 0,
    1, 0, 7, 176, 4, 1, 65, 2, 1, 66, 33, 1, 113, 4, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117,
    114, 108, 1, 115, 0, 13, 116, 105, 109, 101, 111, 117, 116, 45, 101, 114, 114, 111, 114, 1,
    115, 0, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 16,
    117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 13,
    114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114, 111, 114, 0, 3, 0, 0, 1, 109, 3, 6, 102,
    111, 108, 108, 111, 119, 5, 101, 114, 114, 111, 114, 6, 109, 97, 110, 117, 97, 108, 4, 15, 114,
    101, 100, 105, 114, 101, 99, 116, 45, 112, 111, 108, 105, 99, 121, 0, 3, 0, 2, 1, 107, 121, 1,
    114, 3, 10, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 4, 14, 114, 101, 100, 105, 114,
    101, 99, 116, 45, 108, 105, 109, 105, 116, 4, 8, 114, 101, 100, 105, 114, 101, 99, 116, 3, 4,
    15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 5, 1,
    115, 4, 8, 104, 116, 116, 112, 45, 117, 114, 105, 0, 3, 0, 7, 1, 123, 4, 16, 104, 116, 116,
    112, 45, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 0, 3, 0, 9, 1, 115, 4, 11, 104,
    116, 116, 112, 45, 109, 101, 116, 104, 111, 100, 0, 3, 0, 11, 1, 111, 2, 115, 115, 1, 112, 13,
    4, 12, 104, 116, 116, 112, 45, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 14, 1, 121, 4, 16,
    104, 116, 116, 112, 45, 98, 111, 100, 121, 45, 104, 97, 110, 100, 108, 101, 0, 3, 0, 16, 1,
    107, 17, 1, 114, 3, 6, 115, 116, 97, 116, 117, 115, 10, 7, 104, 101, 97, 100, 101, 114, 115,
    15, 4, 98, 111, 100, 121, 18, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 19, 1,
    114, 4, 6, 109, 101, 116, 104, 111, 100, 12, 3, 117, 114, 105, 8, 7, 104, 101, 97, 100, 101,
    114, 115, 15, 4, 98, 111, 100, 121, 18, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 21,
    1, 114, 0, 4, 10, 98, 111, 100, 121, 45, 101, 114, 114, 111, 114, 0, 3, 0, 23, 1, 112, 125, 1,
    111, 2, 25, 127, 1, 106, 1, 26, 1, 24, 1, 64, 2, 6, 104, 97, 110, 100, 108, 101, 17, 4, 115,
    105, 122, 101, 119, 0, 27, 4, 14, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45, 114, 101, 97,
    100, 0, 1, 28, 1, 106, 1, 119, 1, 24, 1, 64, 2, 6, 104, 97, 110, 100, 108, 101, 17, 4, 100, 97,
    116, 97, 25, 0, 29, 4, 15, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45, 119, 114, 105, 116,
    101, 0, 1, 30, 4, 10, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 26, 112, 107, 103, 58,
    47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 47, 104, 116, 116, 112, 45, 116, 121, 112,
    101, 115, 5, 0, 11, 31, 1, 10, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 15, 112, 107,
    103, 58, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 3, 0, 0, 7, 166, 14, 1, 65, 12,
    1, 66, 25, 1, 113, 4, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 1, 115, 0, 13,
    116, 105, 109, 101, 111, 117, 116, 45, 101, 114, 114, 111, 114, 1, 115, 0, 14, 112, 114, 111,
    116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 16, 117, 110, 101, 120, 112,
    101, 99, 116, 101, 100, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 13, 114, 101, 113, 117, 101,
    115, 116, 45, 101, 114, 114, 111, 114, 0, 3, 0, 0, 1, 109, 3, 6, 102, 111, 108, 108, 111, 119,
    5, 101, 114, 114, 111, 114, 6, 109, 97, 110, 117, 97, 108, 4, 15, 114, 101, 100, 105, 114, 101,
    99, 116, 45, 112, 111, 108, 105, 99, 121, 0, 3, 0, 2, 1, 107, 121, 1, 114, 3, 10, 116, 105,
    109, 101, 111, 117, 116, 45, 109, 115, 4, 14, 114, 101, 100, 105, 114, 101, 99, 116, 45, 108,
    105, 109, 105, 116, 4, 8, 114, 101, 100, 105, 114, 101, 99, 116, 3, 4, 15, 114, 101, 113, 117,
    101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 5, 1, 115, 4, 8, 104, 116, 116,
    112, 45, 117, 114, 105, 0, 3, 0, 7, 1, 123, 4, 16, 104, 116, 116, 112, 45, 115, 116, 97, 116,
    117, 115, 45, 99, 111, 100, 101, 0, 3, 0, 9, 1, 115, 4, 11, 104, 116, 116, 112, 45, 109, 101,
    116, 104, 111, 100, 0, 3, 0, 11, 1, 111, 2, 115, 115, 1, 112, 13, 4, 12, 104, 116, 116, 112,
    45, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0, 14, 1, 121, 4, 16, 104, 116, 116, 112, 45, 98,
    111, 100, 121, 45, 104, 97, 110, 100, 108, 101, 0, 3, 0, 16, 1, 107, 17, 1, 114, 3, 6, 115,
    116, 97, 116, 117, 115, 10, 7, 104, 101, 97, 100, 101, 114, 115, 15, 4, 98, 111, 100, 121, 18,
    4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 19, 1, 114, 4, 6, 109, 101, 116, 104,
    111, 100, 12, 3, 117, 114, 105, 8, 7, 104, 101, 97, 100, 101, 114, 115, 15, 4, 98, 111, 100,
    121, 18, 4, 7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 21, 1, 114, 0, 4, 10, 98, 111, 100,
    121, 45, 101, 114, 114, 111, 114, 0, 3, 0, 23, 3, 10, 104, 116, 116, 112, 45, 116, 121, 112,
    101, 115, 26, 112, 107, 103, 58, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 47, 104,
    116, 116, 112, 45, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 7, 114, 101, 113, 117, 101, 115,
    116, 2, 3, 0, 0, 8, 114, 101, 115, 112, 111, 110, 115, 101, 2, 3, 0, 0, 15, 114, 101, 113, 117,
    101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 2, 3, 0, 0, 13, 114, 101, 113, 117, 101,
    115, 116, 45, 101, 114, 114, 111, 114, 1, 66, 11, 2, 3, 2, 1, 1, 4, 7, 114, 101, 113, 117, 101,
    115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 2,
    2, 3, 2, 1, 3, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115,
    0, 3, 0, 4, 2, 3, 2, 1, 4, 4, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114, 111,
    114, 0, 3, 0, 6, 1, 106, 1, 3, 1, 7, 1, 64, 2, 3, 114, 101, 113, 1, 7, 111, 112, 116, 105, 111,
    110, 115, 5, 0, 8, 4, 5, 102, 101, 116, 99, 104, 0, 1, 9, 4, 19, 104, 116, 116, 112, 45, 111,
    117, 116, 103, 111, 105, 110, 103, 45, 105, 102, 97, 99, 101, 39, 112, 107, 103, 58, 47, 104,
    116, 116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 47, 104, 116, 116, 112, 45, 111,
    117, 116, 103, 111, 105, 110, 103, 45, 105, 102, 97, 99, 101, 5, 5, 1, 66, 6, 2, 3, 2, 1, 1, 4,
    7, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 8, 114, 101, 115, 112, 111,
    110, 115, 101, 0, 3, 0, 2, 1, 64, 1, 3, 114, 101, 113, 1, 0, 3, 4, 14, 104, 97, 110, 100, 108,
    101, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 4, 4, 19, 104, 116, 116, 112, 45, 105, 110,
    99, 111, 109, 105, 110, 103, 45, 105, 102, 97, 99, 101, 39, 112, 107, 103, 58, 47, 104, 116,
    116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 47, 104, 116, 116, 112, 45, 105, 110,
    99, 111, 109, 105, 110, 103, 45, 105, 102, 97, 99, 101, 5, 6, 1, 65, 10, 1, 66, 33, 1, 113, 4,
    11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 1, 115, 0, 13, 116, 105, 109, 101,
    111, 117, 116, 45, 101, 114, 114, 111, 114, 1, 115, 0, 14, 112, 114, 111, 116, 111, 99, 111,
    108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 16, 117, 110, 101, 120, 112, 101, 99, 116, 101,
    100, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101,
    114, 114, 111, 114, 0, 3, 0, 0, 1, 109, 3, 6, 102, 111, 108, 108, 111, 119, 5, 101, 114, 114,
    111, 114, 6, 109, 97, 110, 117, 97, 108, 4, 15, 114, 101, 100, 105, 114, 101, 99, 116, 45, 112,
    111, 108, 105, 99, 121, 0, 3, 0, 2, 1, 107, 121, 1, 114, 3, 10, 116, 105, 109, 101, 111, 117,
    116, 45, 109, 115, 4, 14, 114, 101, 100, 105, 114, 101, 99, 116, 45, 108, 105, 109, 105, 116,
    4, 8, 114, 101, 100, 105, 114, 101, 99, 116, 3, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45,
    111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 5, 1, 115, 4, 8, 104, 116, 116, 112, 45, 117, 114,
    105, 0, 3, 0, 7, 1, 123, 4, 16, 104, 116, 116, 112, 45, 115, 116, 97, 116, 117, 115, 45, 99,
    111, 100, 101, 0, 3, 0, 9, 1, 115, 4, 11, 104, 116, 116, 112, 45, 109, 101, 116, 104, 111, 100,
    0, 3, 0, 11, 1, 111, 2, 115, 115, 1, 112, 13, 4, 12, 104, 116, 116, 112, 45, 104, 101, 97, 100,
    101, 114, 115, 0, 3, 0, 14, 1, 121, 4, 16, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45, 104,
    97, 110, 100, 108, 101, 0, 3, 0, 16, 1, 107, 17, 1, 114, 3, 6, 115, 116, 97, 116, 117, 115, 10,
    7, 104, 101, 97, 100, 101, 114, 115, 15, 4, 98, 111, 100, 121, 18, 4, 8, 114, 101, 115, 112,
    111, 110, 115, 101, 0, 3, 0, 19, 1, 114, 4, 6, 109, 101, 116, 104, 111, 100, 12, 3, 117, 114,
    105, 8, 7, 104, 101, 97, 100, 101, 114, 115, 15, 4, 98, 111, 100, 121, 18, 4, 7, 114, 101, 113,
    117, 101, 115, 116, 0, 3, 0, 21, 1, 114, 0, 4, 10, 98, 111, 100, 121, 45, 101, 114, 114, 111,
    114, 0, 3, 0, 23, 1, 112, 125, 1, 111, 2, 25, 127, 1, 106, 1, 26, 1, 24, 1, 64, 2, 6, 104, 97,
    110, 100, 108, 101, 17, 4, 115, 105, 122, 101, 119, 0, 27, 4, 14, 104, 116, 116, 112, 45, 98,
    111, 100, 121, 45, 114, 101, 97, 100, 0, 1, 28, 1, 106, 1, 119, 1, 24, 1, 64, 2, 6, 104, 97,
    110, 100, 108, 101, 17, 4, 100, 97, 116, 97, 25, 0, 29, 4, 15, 104, 116, 116, 112, 45, 98, 111,
    100, 121, 45, 119, 114, 105, 116, 101, 0, 1, 30, 3, 10, 104, 116, 116, 112, 45, 116, 121, 112,
    101, 115, 26, 112, 107, 103, 58, 47, 104, 116, 116, 112, 45, 116, 121, 112, 101, 115, 47, 104,
    116, 116, 112, 45, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 7, 114, 101, 113, 117, 101, 115,
    116, 2, 3, 0, 0, 8, 114, 101, 115, 112, 111, 110, 115, 101, 2, 3, 0, 0, 15, 114, 101, 113, 117,
    101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 2, 3, 0, 0, 13, 114, 101, 113, 117, 101,
    115, 116, 45, 101, 114, 114, 111, 114, 1, 66, 11, 2, 3, 2, 1, 1, 4, 7, 114, 101, 113, 117, 101,
    115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 2,
    2, 3, 2, 1, 3, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115,
    0, 3, 0, 4, 2, 3, 2, 1, 4, 4, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114, 111,
    114, 0, 3, 0, 6, 1, 106, 1, 3, 1, 7, 1, 64, 2, 3, 114, 101, 113, 1, 7, 111, 112, 116, 105, 111,
    110, 115, 5, 0, 8, 4, 5, 102, 101, 116, 99, 104, 0, 1, 9, 3, 13, 104, 116, 116, 112, 45, 111,
    117, 116, 103, 111, 105, 110, 103, 39, 112, 107, 103, 58, 47, 104, 116, 116, 112, 45, 105, 110,
    116, 101, 114, 102, 97, 99, 101, 47, 104, 116, 116, 112, 45, 111, 117, 116, 103, 111, 105, 110,
    103, 45, 105, 102, 97, 99, 101, 5, 5, 1, 66, 6, 2, 3, 2, 1, 1, 4, 7, 114, 101, 113, 117, 101,
    115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 2, 4, 8, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 2,
    1, 64, 1, 3, 114, 101, 113, 1, 0, 3, 4, 14, 104, 97, 110, 100, 108, 101, 45, 114, 101, 113,
    117, 101, 115, 116, 0, 1, 4, 4, 13, 104, 116, 116, 112, 45, 105, 110, 99, 111, 109, 105, 110,
    103, 39, 112, 107, 103, 58, 47, 104, 116, 116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99,
    101, 47, 104, 116, 116, 112, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 105, 102, 97, 99,
    101, 5, 6, 4, 14, 104, 116, 116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 34, 112,
    107, 103, 58, 47, 104, 116, 116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 47, 104,
    116, 116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 4, 7, 0, 68, 9, 112, 114, 111,
    100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2,
    13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 5, 48, 46, 55, 46, 52, 16,
    119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 5, 48, 46, 52, 46,
    48, 11, 39, 1, 14, 104, 116, 116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 19, 112,
    107, 103, 58, 47, 104, 116, 116, 112, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 3, 2, 0,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
