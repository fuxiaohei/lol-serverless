/**
 * @fileoverview gRPC-Web generated client stub for lol
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.12
// source: proto/lol-rpc.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.lol = require('./lol-rpc_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.lol.RpcServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.lol.RpcServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.SignupEmailRequest,
 *   !proto.lol.LoginResponse>}
 */
const methodDescriptor_RpcService_SignupEmail = new grpc.web.MethodDescriptor(
  '/lol.RpcService/SignupEmail',
  grpc.web.MethodType.UNARY,
  proto.lol.SignupEmailRequest,
  proto.lol.LoginResponse,
  /**
   * @param {!proto.lol.SignupEmailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.lol.SignupEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.signupEmail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/SignupEmail',
      request,
      metadata || {},
      methodDescriptor_RpcService_SignupEmail,
      callback);
};


/**
 * @param {!proto.lol.SignupEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.signupEmail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/SignupEmail',
      request,
      metadata || {},
      methodDescriptor_RpcService_SignupEmail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.LoginEmailRequest,
 *   !proto.lol.LoginResponse>}
 */
const methodDescriptor_RpcService_LoginEmail = new grpc.web.MethodDescriptor(
  '/lol.RpcService/LoginEmail',
  grpc.web.MethodType.UNARY,
  proto.lol.LoginEmailRequest,
  proto.lol.LoginResponse,
  /**
   * @param {!proto.lol.LoginEmailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.lol.LoginEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.loginEmail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/LoginEmail',
      request,
      metadata || {},
      methodDescriptor_RpcService_LoginEmail,
      callback);
};


/**
 * @param {!proto.lol.LoginEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.loginEmail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/LoginEmail',
      request,
      metadata || {},
      methodDescriptor_RpcService_LoginEmail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.LoginAccessTokenRequest,
 *   !proto.lol.LoginResponse>}
 */
const methodDescriptor_RpcService_LoginAccessToken = new grpc.web.MethodDescriptor(
  '/lol.RpcService/LoginAccessToken',
  grpc.web.MethodType.UNARY,
  proto.lol.LoginAccessTokenRequest,
  proto.lol.LoginResponse,
  /**
   * @param {!proto.lol.LoginAccessTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.lol.LoginAccessTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.loginAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/LoginAccessToken',
      request,
      metadata || {},
      methodDescriptor_RpcService_LoginAccessToken,
      callback);
};


/**
 * @param {!proto.lol.LoginAccessTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.loginAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/LoginAccessToken',
      request,
      metadata || {},
      methodDescriptor_RpcService_LoginAccessToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.CreateAccessTokenRequest,
 *   !proto.lol.CreateAccessTokenResponse>}
 */
const methodDescriptor_RpcService_CreateAccessToken = new grpc.web.MethodDescriptor(
  '/lol.RpcService/CreateAccessToken',
  grpc.web.MethodType.UNARY,
  proto.lol.CreateAccessTokenRequest,
  proto.lol.CreateAccessTokenResponse,
  /**
   * @param {!proto.lol.CreateAccessTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.CreateAccessTokenResponse.deserializeBinary
);


/**
 * @param {!proto.lol.CreateAccessTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.CreateAccessTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.CreateAccessTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.createAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/CreateAccessToken',
      request,
      metadata || {},
      methodDescriptor_RpcService_CreateAccessToken,
      callback);
};


/**
 * @param {!proto.lol.CreateAccessTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.CreateAccessTokenResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.createAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/CreateAccessToken',
      request,
      metadata || {},
      methodDescriptor_RpcService_CreateAccessToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.Empty,
 *   !proto.lol.ListAccessTokensResponse>}
 */
const methodDescriptor_RpcService_ListAccessTokens = new grpc.web.MethodDescriptor(
  '/lol.RpcService/ListAccessTokens',
  grpc.web.MethodType.UNARY,
  proto.lol.Empty,
  proto.lol.ListAccessTokensResponse,
  /**
   * @param {!proto.lol.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.ListAccessTokensResponse.deserializeBinary
);


/**
 * @param {!proto.lol.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.ListAccessTokensResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.ListAccessTokensResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.listAccessTokens =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/ListAccessTokens',
      request,
      metadata || {},
      methodDescriptor_RpcService_ListAccessTokens,
      callback);
};


/**
 * @param {!proto.lol.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.ListAccessTokensResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.listAccessTokens =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/ListAccessTokens',
      request,
      metadata || {},
      methodDescriptor_RpcService_ListAccessTokens);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.RemoveAccessTokenRequest,
 *   !proto.lol.NoDataResponse>}
 */
const methodDescriptor_RpcService_RemoveAccessToken = new grpc.web.MethodDescriptor(
  '/lol.RpcService/RemoveAccessToken',
  grpc.web.MethodType.UNARY,
  proto.lol.RemoveAccessTokenRequest,
  proto.lol.NoDataResponse,
  /**
   * @param {!proto.lol.RemoveAccessTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.NoDataResponse.deserializeBinary
);


/**
 * @param {!proto.lol.RemoveAccessTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.NoDataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.NoDataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.removeAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/RemoveAccessToken',
      request,
      metadata || {},
      methodDescriptor_RpcService_RemoveAccessToken,
      callback);
};


/**
 * @param {!proto.lol.RemoveAccessTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.NoDataResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.removeAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/RemoveAccessToken',
      request,
      metadata || {},
      methodDescriptor_RpcService_RemoveAccessToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.FetchProjectRequest,
 *   !proto.lol.ProjectResponse>}
 */
const methodDescriptor_RpcService_FetchProject = new grpc.web.MethodDescriptor(
  '/lol.RpcService/FetchProject',
  grpc.web.MethodType.UNARY,
  proto.lol.FetchProjectRequest,
  proto.lol.ProjectResponse,
  /**
   * @param {!proto.lol.FetchProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.ProjectResponse.deserializeBinary
);


/**
 * @param {!proto.lol.FetchProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.ProjectResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.ProjectResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.fetchProject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/FetchProject',
      request,
      metadata || {},
      methodDescriptor_RpcService_FetchProject,
      callback);
};


/**
 * @param {!proto.lol.FetchProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.ProjectResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.fetchProject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/FetchProject',
      request,
      metadata || {},
      methodDescriptor_RpcService_FetchProject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.FetchProjectRequest,
 *   !proto.lol.ProjectResponse>}
 */
const methodDescriptor_RpcService_CreateEmptyProject = new grpc.web.MethodDescriptor(
  '/lol.RpcService/CreateEmptyProject',
  grpc.web.MethodType.UNARY,
  proto.lol.FetchProjectRequest,
  proto.lol.ProjectResponse,
  /**
   * @param {!proto.lol.FetchProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.ProjectResponse.deserializeBinary
);


/**
 * @param {!proto.lol.FetchProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.ProjectResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.ProjectResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.createEmptyProject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/CreateEmptyProject',
      request,
      metadata || {},
      methodDescriptor_RpcService_CreateEmptyProject,
      callback);
};


/**
 * @param {!proto.lol.FetchProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.ProjectResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.createEmptyProject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/CreateEmptyProject',
      request,
      metadata || {},
      methodDescriptor_RpcService_CreateEmptyProject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.Empty,
 *   !proto.lol.ListProjectsResponse>}
 */
const methodDescriptor_RpcService_ListProjects = new grpc.web.MethodDescriptor(
  '/lol.RpcService/ListProjects',
  grpc.web.MethodType.UNARY,
  proto.lol.Empty,
  proto.lol.ListProjectsResponse,
  /**
   * @param {!proto.lol.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.ListProjectsResponse.deserializeBinary
);


/**
 * @param {!proto.lol.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.ListProjectsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.ListProjectsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.listProjects =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/ListProjects',
      request,
      metadata || {},
      methodDescriptor_RpcService_ListProjects,
      callback);
};


/**
 * @param {!proto.lol.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.ListProjectsResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.listProjects =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/ListProjects',
      request,
      metadata || {},
      methodDescriptor_RpcService_ListProjects);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.CreateDeploymentRequest,
 *   !proto.lol.DeploymentResponse>}
 */
const methodDescriptor_RpcService_CreateDeployment = new grpc.web.MethodDescriptor(
  '/lol.RpcService/CreateDeployment',
  grpc.web.MethodType.UNARY,
  proto.lol.CreateDeploymentRequest,
  proto.lol.DeploymentResponse,
  /**
   * @param {!proto.lol.CreateDeploymentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.DeploymentResponse.deserializeBinary
);


/**
 * @param {!proto.lol.CreateDeploymentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.DeploymentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.DeploymentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.createDeployment =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/CreateDeployment',
      request,
      metadata || {},
      methodDescriptor_RpcService_CreateDeployment,
      callback);
};


/**
 * @param {!proto.lol.CreateDeploymentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.DeploymentResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.createDeployment =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/CreateDeployment',
      request,
      metadata || {},
      methodDescriptor_RpcService_CreateDeployment);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.PublishDeploymentRequest,
 *   !proto.lol.DeploymentResponse>}
 */
const methodDescriptor_RpcService_PublishDeployment = new grpc.web.MethodDescriptor(
  '/lol.RpcService/PublishDeployment',
  grpc.web.MethodType.UNARY,
  proto.lol.PublishDeploymentRequest,
  proto.lol.DeploymentResponse,
  /**
   * @param {!proto.lol.PublishDeploymentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.DeploymentResponse.deserializeBinary
);


/**
 * @param {!proto.lol.PublishDeploymentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.DeploymentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.DeploymentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.publishDeployment =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/PublishDeployment',
      request,
      metadata || {},
      methodDescriptor_RpcService_PublishDeployment,
      callback);
};


/**
 * @param {!proto.lol.PublishDeploymentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.DeploymentResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.publishDeployment =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/PublishDeployment',
      request,
      metadata || {},
      methodDescriptor_RpcService_PublishDeployment);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.lol.ProjectOverviewRequest,
 *   !proto.lol.ProjectOverviewResponse>}
 */
const methodDescriptor_RpcService_ProjectOverview = new grpc.web.MethodDescriptor(
  '/lol.RpcService/ProjectOverview',
  grpc.web.MethodType.UNARY,
  proto.lol.ProjectOverviewRequest,
  proto.lol.ProjectOverviewResponse,
  /**
   * @param {!proto.lol.ProjectOverviewRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.lol.ProjectOverviewResponse.deserializeBinary
);


/**
 * @param {!proto.lol.ProjectOverviewRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.lol.ProjectOverviewResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.lol.ProjectOverviewResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.lol.RpcServiceClient.prototype.projectOverview =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/lol.RpcService/ProjectOverview',
      request,
      metadata || {},
      methodDescriptor_RpcService_ProjectOverview,
      callback);
};


/**
 * @param {!proto.lol.ProjectOverviewRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.lol.ProjectOverviewResponse>}
 *     Promise that resolves to the response
 */
proto.lol.RpcServicePromiseClient.prototype.projectOverview =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/lol.RpcService/ProjectOverview',
      request,
      metadata || {},
      methodDescriptor_RpcService_ProjectOverview);
};


module.exports = proto.lol;

