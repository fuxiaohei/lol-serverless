// Generated by `wit-bindgen` 0.13.0. DO NOT EDIT!
pub mod land {
    pub mod http {

        #[allow(clippy::all)]
        pub mod http_types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
            pub type HttpStatusCode = u16;
            pub type HttpMethod = wit_bindgen::rt::string::String;
            pub type HttpHeaders = wit_bindgen::rt::vec::Vec<(
                wit_bindgen::rt::string::String,
                wit_bindgen::rt::string::String,
            )>;
            pub type HttpUri = wit_bindgen::rt::string::String;
            pub type HttpBodyHandle = u32;
            #[derive(Clone)]
            pub struct Request {
                pub method: HttpMethod,
                pub uri: HttpUri,
                pub headers: HttpHeaders,
                pub body: Option<HttpBodyHandle>,
            }
            impl ::core::fmt::Debug for Request {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Request")
                        .field("method", &self.method)
                        .field("uri", &self.uri)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Response {
                pub status: HttpStatusCode,
                pub headers: HttpHeaders,
                pub body: Option<HttpBodyHandle>,
            }
            impl ::core::fmt::Debug for Response {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Response")
                        .field("status", &self.status)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum RequestError {
                NetworkError,
                Timeout,
                InvalidUrl,
                DestinationNotAllowed,
                TooManyRequests,
                InvalidRequest,
            }
            impl RequestError {
                pub fn name(&self) -> &'static str {
                    match self {
                        RequestError::NetworkError => "network-error",
                        RequestError::Timeout => "timeout",
                        RequestError::InvalidUrl => "invalid-url",
                        RequestError::DestinationNotAllowed => "destination-not-allowed",
                        RequestError::TooManyRequests => "too-many-requests",
                        RequestError::InvalidRequest => "invalid-request",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        RequestError::NetworkError => "",
                        RequestError::Timeout => "",
                        RequestError::InvalidUrl => "",
                        RequestError::DestinationNotAllowed => "",
                        RequestError::TooManyRequests => "",
                        RequestError::InvalidRequest => "",
                    }
                }
            }
            impl ::core::fmt::Debug for RequestError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RequestError")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for RequestError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for RequestError {}

            impl RequestError {
                pub(crate) unsafe fn _lift(val: u8) -> RequestError {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => RequestError::NetworkError,
                        1 => RequestError::Timeout,
                        2 => RequestError::InvalidUrl,
                        3 => RequestError::DestinationNotAllowed,
                        4 => RequestError::TooManyRequests,
                        5 => RequestError::InvalidRequest,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum RedirectPolicy {
                Follow,
                Error,
                Manual,
            }
            impl ::core::fmt::Debug for RedirectPolicy {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RedirectPolicy::Follow => f.debug_tuple("RedirectPolicy::Follow").finish(),
                        RedirectPolicy::Error => f.debug_tuple("RedirectPolicy::Error").finish(),
                        RedirectPolicy::Manual => f.debug_tuple("RedirectPolicy::Manual").finish(),
                    }
                }
            }

            impl RedirectPolicy {
                pub(crate) unsafe fn _lift(val: u8) -> RedirectPolicy {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => RedirectPolicy::Follow,
                        1 => RedirectPolicy::Error,
                        2 => RedirectPolicy::Manual,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RequestOptions {
                pub timeout: u32,
                pub redirect: RedirectPolicy,
            }
            impl ::core::fmt::Debug for RequestOptions {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RequestOptions")
                        .field("timeout", &self.timeout)
                        .field("redirect", &self.redirect)
                        .finish()
                }
            }
        }
    }
}
pub mod exports {
    pub mod land {
        pub mod http {

            #[allow(clippy::all)]
            pub mod http_incoming {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                pub type Request = super::super::super::super::land::http::http_types::Request;
                pub type Response = super::super::super::super::land::http::http_types::Response;
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "land:http/http-incoming#handle-request"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_handle_request(
                        arg0: i32,
                        arg1: i32,
                        arg2: i32,
                        arg3: i32,
                        arg4: i32,
                        arg5: i32,
                        arg6: i32,
                        arg7: i32,
                    ) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let len0 = arg1 as usize;
                        let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
                        let len1 = arg3 as usize;
                        let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
                        let base8 = arg4;
                        let len8 = arg5;
                        let mut result8 = Vec::with_capacity(len8 as usize);
                        for i in 0..len8 {
                            let base = base8 + i * 16;
                            let e8 = {
                                let l2 = *((base + 0) as *const i32);
                                let l3 = *((base + 4) as *const i32);
                                let len4 = l3 as usize;
                                let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
                                let l5 = *((base + 8) as *const i32);
                                let l6 = *((base + 12) as *const i32);
                                let len7 = l6 as usize;
                                let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);

                                (
                                    wit_bindgen::rt::string_lift(bytes4),
                                    wit_bindgen::rt::string_lift(bytes7),
                                )
                            };
                            result8.push(e8);
                        }
                        wit_bindgen::rt::dealloc(base8, (len8 as usize) * 16, 4);
                        let result9 = <_GuestImpl as Guest>::handle_request(
                            super::super::super::super::land::http::http_types::Request {
                                method: wit_bindgen::rt::string_lift(bytes0),
                                uri: wit_bindgen::rt::string_lift(bytes1),
                                headers: result8,
                                body: match arg6 {
                                    0 => None,
                                    1 => {
                                        let e = arg7 as u32;
                                        Some(e)
                                    }
                                    _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                            },
                        );
                        let ptr10 = _RET_AREA.0.as_mut_ptr() as i32;
                        let super::super::super::super::land::http::http_types::Response {
                            status: status11,
                            headers: headers11,
                            body: body11,
                        } = result9;
                        *((ptr10 + 0) as *mut u16) = (wit_bindgen::rt::as_i32(status11)) as u16;
                        let vec15 = headers11;
                        let len15 = vec15.len() as i32;
                        let layout15 =
                            alloc::Layout::from_size_align_unchecked(vec15.len() * 16, 4);
                        let result15 = if layout15.size() != 0 {
                            let ptr = alloc::alloc(layout15);
                            if ptr.is_null() {
                                alloc::handle_alloc_error(layout15);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec15.into_iter().enumerate() {
                            let base = result15 as i32 + (i as i32) * 16;
                            {
                                let (t12_0, t12_1) = e;
                                let vec13 = (t12_0.into_bytes()).into_boxed_slice();
                                let ptr13 = vec13.as_ptr() as i32;
                                let len13 = vec13.len() as i32;
                                ::core::mem::forget(vec13);
                                *((base + 4) as *mut i32) = len13;
                                *((base + 0) as *mut i32) = ptr13;
                                let vec14 = (t12_1.into_bytes()).into_boxed_slice();
                                let ptr14 = vec14.as_ptr() as i32;
                                let len14 = vec14.len() as i32;
                                ::core::mem::forget(vec14);
                                *((base + 12) as *mut i32) = len14;
                                *((base + 8) as *mut i32) = ptr14;
                            }
                        }
                        *((ptr10 + 8) as *mut i32) = len15;
                        *((ptr10 + 4) as *mut i32) = result15 as i32;
                        match body11 {
                            Some(e) => {
                                *((ptr10 + 12) as *mut u8) = (1i32) as u8;
                                *((ptr10 + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                            }
                            None => {
                                *((ptr10 + 12) as *mut u8) = (0i32) as u8;
                            }
                        };
                        ptr10
                    }

                    const _: () = {
                        #[doc(hidden)]
                        #[export_name = "cabi_post_land:http/http-incoming#handle-request"]
                        #[allow(non_snake_case)]
                        unsafe extern "C" fn __post_return_handle_request(arg0: i32) {
                            let l4 = *((arg0 + 4) as *const i32);
                            let l5 = *((arg0 + 8) as *const i32);
                            let base6 = l4;
                            let len6 = l5;
                            for i in 0..len6 {
                                let base = base6 + i * 16;
                                {
                                    let l0 = *((base + 0) as *const i32);
                                    let l1 = *((base + 4) as *const i32);
                                    wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                                    let l2 = *((base + 8) as *const i32);
                                    let l3 = *((base + 12) as *const i32);
                                    wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
                                }
                            }
                            wit_bindgen::rt::dealloc(base6, (len6 as usize) * 16, 4);
                        }
                    };
                };
                use super::super::super::super::HttpImpl as _GuestImpl;
                pub trait Guest {
                    fn handle_request(req: Request) -> Response;
                }

                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                #[repr(align(4))]
                struct _RetArea([u8; 20]);
                static mut _RET_AREA: _RetArea = _RetArea([0; 20]);
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:http-handler"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1755] = [
    3, 0, 12, 104, 116, 116, 112, 45, 104, 97, 110, 100, 108, 101, 114, 0, 97, 115, 109, 13, 0, 1,
    0, 7, 204, 12, 1, 65, 4, 1, 65, 6, 1, 66, 22, 1, 123, 4, 0, 16, 104, 116, 116, 112, 45, 115,
    116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 3, 0, 0, 1, 115, 4, 0, 11, 104, 116, 116, 112,
    45, 109, 101, 116, 104, 111, 100, 3, 0, 2, 1, 111, 2, 115, 115, 1, 112, 4, 4, 0, 12, 104, 116,
    116, 112, 45, 104, 101, 97, 100, 101, 114, 115, 3, 0, 5, 1, 115, 4, 0, 8, 104, 116, 116, 112,
    45, 117, 114, 105, 3, 0, 7, 1, 121, 4, 0, 16, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45,
    104, 97, 110, 100, 108, 101, 3, 0, 9, 1, 107, 10, 1, 114, 4, 6, 109, 101, 116, 104, 111, 100,
    3, 3, 117, 114, 105, 8, 7, 104, 101, 97, 100, 101, 114, 115, 6, 4, 98, 111, 100, 121, 11, 4, 0,
    7, 114, 101, 113, 117, 101, 115, 116, 3, 0, 12, 1, 114, 3, 6, 115, 116, 97, 116, 117, 115, 1,
    7, 104, 101, 97, 100, 101, 114, 115, 6, 4, 98, 111, 100, 121, 11, 4, 0, 8, 114, 101, 115, 112,
    111, 110, 115, 101, 3, 0, 14, 1, 109, 6, 13, 110, 101, 116, 119, 111, 114, 107, 45, 101, 114,
    114, 111, 114, 7, 116, 105, 109, 101, 111, 117, 116, 11, 105, 110, 118, 97, 108, 105, 100, 45,
    117, 114, 108, 23, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 45, 110, 111, 116, 45,
    97, 108, 108, 111, 119, 101, 100, 17, 116, 111, 111, 45, 109, 97, 110, 121, 45, 114, 101, 113,
    117, 101, 115, 116, 115, 15, 105, 110, 118, 97, 108, 105, 100, 45, 114, 101, 113, 117, 101,
    115, 116, 4, 0, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114, 111, 114, 3, 0, 16,
    1, 109, 3, 6, 102, 111, 108, 108, 111, 119, 5, 101, 114, 114, 111, 114, 6, 109, 97, 110, 117,
    97, 108, 4, 0, 15, 114, 101, 100, 105, 114, 101, 99, 116, 45, 112, 111, 108, 105, 99, 121, 3,
    0, 18, 1, 114, 2, 7, 116, 105, 109, 101, 111, 117, 116, 121, 8, 114, 101, 100, 105, 114, 101,
    99, 116, 19, 4, 0, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110,
    115, 3, 0, 20, 3, 1, 20, 108, 97, 110, 100, 58, 104, 116, 116, 112, 47, 104, 116, 116, 112, 45,
    116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 7, 114, 101, 113, 117, 101, 115, 116, 2, 3, 0, 0, 8,
    114, 101, 115, 112, 111, 110, 115, 101, 1, 66, 6, 2, 3, 2, 1, 1, 4, 0, 7, 114, 101, 113, 117,
    101, 115, 116, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 8, 114, 101, 115, 112, 111, 110, 115, 101, 3, 0,
    2, 1, 64, 1, 3, 114, 101, 113, 1, 0, 3, 4, 0, 14, 104, 97, 110, 100, 108, 101, 45, 114, 101,
    113, 117, 101, 115, 116, 1, 4, 4, 1, 23, 108, 97, 110, 100, 58, 104, 116, 116, 112, 47, 104,
    116, 116, 112, 45, 105, 110, 99, 111, 109, 105, 110, 103, 5, 3, 4, 1, 28, 108, 97, 110, 100,
    58, 115, 101, 114, 118, 101, 114, 108, 101, 115, 115, 47, 104, 116, 116, 112, 45, 104, 97, 110,
    100, 108, 101, 114, 4, 0, 1, 65, 11, 1, 66, 22, 1, 123, 4, 0, 16, 104, 116, 116, 112, 45, 115,
    116, 97, 116, 117, 115, 45, 99, 111, 100, 101, 3, 0, 0, 1, 115, 4, 0, 11, 104, 116, 116, 112,
    45, 109, 101, 116, 104, 111, 100, 3, 0, 2, 1, 111, 2, 115, 115, 1, 112, 4, 4, 0, 12, 104, 116,
    116, 112, 45, 104, 101, 97, 100, 101, 114, 115, 3, 0, 5, 1, 115, 4, 0, 8, 104, 116, 116, 112,
    45, 117, 114, 105, 3, 0, 7, 1, 121, 4, 0, 16, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45,
    104, 97, 110, 100, 108, 101, 3, 0, 9, 1, 107, 10, 1, 114, 4, 6, 109, 101, 116, 104, 111, 100,
    3, 3, 117, 114, 105, 8, 7, 104, 101, 97, 100, 101, 114, 115, 6, 4, 98, 111, 100, 121, 11, 4, 0,
    7, 114, 101, 113, 117, 101, 115, 116, 3, 0, 12, 1, 114, 3, 6, 115, 116, 97, 116, 117, 115, 1,
    7, 104, 101, 97, 100, 101, 114, 115, 6, 4, 98, 111, 100, 121, 11, 4, 0, 8, 114, 101, 115, 112,
    111, 110, 115, 101, 3, 0, 14, 1, 109, 6, 13, 110, 101, 116, 119, 111, 114, 107, 45, 101, 114,
    114, 111, 114, 7, 116, 105, 109, 101, 111, 117, 116, 11, 105, 110, 118, 97, 108, 105, 100, 45,
    117, 114, 108, 23, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 45, 110, 111, 116, 45,
    97, 108, 108, 111, 119, 101, 100, 17, 116, 111, 111, 45, 109, 97, 110, 121, 45, 114, 101, 113,
    117, 101, 115, 116, 115, 15, 105, 110, 118, 97, 108, 105, 100, 45, 114, 101, 113, 117, 101,
    115, 116, 4, 0, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114, 111, 114, 3, 0, 16,
    1, 109, 3, 6, 102, 111, 108, 108, 111, 119, 5, 101, 114, 114, 111, 114, 6, 109, 97, 110, 117,
    97, 108, 4, 0, 15, 114, 101, 100, 105, 114, 101, 99, 116, 45, 112, 111, 108, 105, 99, 121, 3,
    0, 18, 1, 114, 2, 7, 116, 105, 109, 101, 111, 117, 116, 121, 8, 114, 101, 100, 105, 114, 101,
    99, 116, 19, 4, 0, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110,
    115, 3, 0, 20, 3, 1, 20, 108, 97, 110, 100, 58, 104, 116, 116, 112, 47, 104, 116, 116, 112, 45,
    116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 16, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45,
    104, 97, 110, 100, 108, 101, 1, 66, 19, 2, 3, 2, 1, 1, 4, 0, 16, 104, 116, 116, 112, 45, 98,
    111, 100, 121, 45, 104, 97, 110, 100, 108, 101, 3, 0, 0, 1, 113, 4, 14, 105, 110, 118, 97, 108,
    105, 100, 45, 104, 97, 110, 100, 108, 101, 0, 0, 9, 114, 101, 97, 100, 45, 111, 110, 108, 121,
    0, 0, 11, 114, 101, 97, 100, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 12, 119, 114, 105,
    116, 101, 45, 102, 97, 105, 108, 101, 100, 1, 115, 0, 4, 0, 10, 98, 111, 100, 121, 45, 101,
    114, 114, 111, 114, 3, 0, 2, 1, 112, 125, 1, 111, 2, 4, 127, 1, 106, 1, 5, 1, 3, 1, 64, 1, 6,
    104, 97, 110, 100, 108, 101, 1, 0, 6, 4, 0, 14, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45,
    114, 101, 97, 100, 1, 7, 1, 106, 1, 4, 1, 3, 1, 64, 1, 6, 104, 97, 110, 100, 108, 101, 1, 0, 8,
    4, 0, 18, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45, 114, 101, 97, 100, 45, 97, 108, 108,
    1, 9, 1, 106, 1, 119, 1, 3, 1, 64, 2, 6, 104, 97, 110, 100, 108, 101, 1, 4, 100, 97, 116, 97,
    4, 0, 10, 4, 0, 15, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45, 119, 114, 105, 116, 101, 1,
    11, 1, 106, 1, 1, 1, 3, 1, 64, 0, 0, 12, 4, 0, 13, 104, 116, 116, 112, 45, 98, 111, 100, 121,
    45, 110, 101, 119, 1, 13, 4, 0, 20, 104, 116, 116, 112, 45, 98, 111, 100, 121, 45, 110, 101,
    119, 45, 115, 116, 114, 101, 97, 109, 1, 13, 3, 1, 19, 108, 97, 110, 100, 58, 104, 116, 116,
    112, 47, 104, 116, 116, 112, 45, 98, 111, 100, 121, 5, 2, 2, 3, 0, 0, 7, 114, 101, 113, 117,
    101, 115, 116, 2, 3, 0, 0, 8, 114, 101, 115, 112, 111, 110, 115, 101, 2, 3, 0, 0, 13, 114, 101,
    113, 117, 101, 115, 116, 45, 101, 114, 114, 111, 114, 2, 3, 0, 0, 15, 114, 101, 113, 117, 101,
    115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 1, 66, 11, 2, 3, 2, 1, 3, 4, 0, 7, 114, 101,
    113, 117, 101, 115, 116, 3, 0, 0, 2, 3, 2, 1, 4, 4, 0, 8, 114, 101, 115, 112, 111, 110, 115,
    101, 3, 0, 2, 2, 3, 2, 1, 5, 4, 0, 13, 114, 101, 113, 117, 101, 115, 116, 45, 101, 114, 114,
    111, 114, 3, 0, 4, 2, 3, 2, 1, 6, 4, 0, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112,
    116, 105, 111, 110, 115, 3, 0, 6, 1, 106, 1, 3, 1, 5, 1, 64, 2, 3, 114, 101, 113, 1, 7, 111,
    112, 116, 105, 111, 110, 115, 7, 0, 8, 4, 0, 13, 102, 101, 116, 99, 104, 45, 114, 101, 113,
    117, 101, 115, 116, 1, 9, 3, 1, 23, 108, 97, 110, 100, 58, 104, 116, 116, 112, 47, 104, 116,
    116, 112, 45, 111, 117, 116, 103, 111, 105, 110, 103, 5, 7, 4, 1, 28, 108, 97, 110, 100, 58,
    115, 101, 114, 118, 101, 114, 108, 101, 115, 115, 47, 104, 116, 116, 112, 45, 115, 101, 114,
    118, 105, 99, 101, 4, 1, 11, 25, 1, 1, 19, 108, 97, 110, 100, 58, 115, 101, 114, 118, 101, 114,
    108, 101, 115, 115, 47, 119, 105, 116, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45,
    100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12,
    112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111,
    109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 54, 46, 48, 16, 119, 105, 116, 45, 98, 105,
    110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 51, 46, 48,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
