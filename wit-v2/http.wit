package moni:moni

interface http-types {
    // HTTP Status Codes
    type http-status-code = u16

    // HTTP Request Methods, use uppercase
    type http-method = string

    // HTTP Request Headers
    type http-headers = list<tuple<string, string>>

    // HTTP URI
    type http-uri = string

    // HTTP Request Body
    type http-body-handle = u32

    // HTTP Request
    record request{
        method: http-method,
        uri: http-uri,
        headers: http-headers,
        body: option<http-body-handle>
    }

    // HTTP Response
    record response{
        status: http-status-code,
        headers: http-headers,
        body: option<http-body-handle>
    }

    // HTTP errors returned by the runtime.
    enum request-error {
        // The request failed due to a network error.
        network-error,
        // The request failed due to a timeout.
        timeout,
        // The request failed due to a invalid url.
        invalid-url,
        // The request failed due to a forbidden destination.
        destination-not-allowed,
        // The request failed due to over requests limit.
        too-many-requests,
        // The request failed due to invalid request 
        invalid-request,
    }

    // Fetch redirect policy
    enum redirect-policy {
        // Follow redirects.
        follow,
        // Do not follow redirects.
        error,
        // Follow redirects, but do not follow redirects to cross-origin destinations.
        manual,
    }

    // HTTP request option
    record request-options{
        // The request timeout in milliseconds.
        timeout: u32,
        // Follow redirects.
        redirect: redirect-policy,
    }
}

interface http-body {
    use http-types.{http-body-handle}

    /// an error type returned from a body operation.
    variant body-error{
        /// The body is invalid
        invalid-handle,
        /// The body is only readable
        read-only,
        /// The body read failed
        read-failed(string),
        /// The body write failed
        write-failed(string),
    }

    /// Read http body bytes with size and eof flag
    http-body-read: func(handle: http-body-handle) -> result<tuple<list<u8>, bool>, body-error>

    /// Readall http body bytes with size and eof flag
    http-body-read-all: func(handle: http-body-handle) -> result<list<u8>, body-error>

    /// Write http body bytes, return written bytes length
    http-body-write: func(handle: http-body-handle, data: list<u8>) -> result<u64, body-error>

    /// Accquire http body and get http body handle
    http-body-new: func() -> result<http-body-handle,body-error>

    /// Accquire http body and get http body handle
    http-body-new-stream: func() -> result<http-body-handle,body-error>
}

interface http-incoming {
    use http-types.{request,response}

    // handle request function
    handle-request: func(req: request) -> response
}

interface http-outgoing {
    use http-types.{request,response,request-error,request-options}

    // send request function
    fetch-request: func(req: request, options: request-options) -> result<response,request-error>
}

world http-service {
    import http-body
    import http-outgoing
    export http-incoming
}